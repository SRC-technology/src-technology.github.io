{"version":3,"file":"static/webpack/static/development/pages/index.js.6a18f109381fc5a73a05.hot-update.js","sources":["webpack:///./src/shapes.js"],"sourcesContent":["export const rect = context2d => (x, y, width, height) => {\n  context2d.fillRect(x, y, width, height)\n}\n\nexport const circle = context2d => (x, y, radius) => {\n  context2d.beginPath();\n  context2d.arc(x, y, radius, 0, 2 * Math.PI)\n  context2d.fill()\n}\n\nexport const dot = context2d => (x, y) => {\n  context2d.beginPath();\n  context2d.arc(x, y, 2, 0, 2 * Math.PI)\n  context2d.fill()\n}\n\nexport const triangle = context2d => (x, y, up, left, width, height) => {\n  context2d.beginPath()\n  context2d.moveTo(left ? x : x + width, up ? y : y + height)\n  context2d.lineTo(left ? x : x + width, up ? y + height : y)\n  context2d.lineTo(left ? x + width : x, up ? y + height : y)\n  context2d.closePath()\n  context2d.fill()\n}\n\nexport const triangleBoundary = context2d => (x, y, up, left, width, height) => {\n  context2d.beginPath()\n  if (up && left) {\n    context2d.moveTo(x + width, y)\n    context2d.lineTo(x + width, y + (height / 10))\n    context2d.lineTo(x + (width / 10), y + (height / 10))\n    context2d.lineTo(x + (width / 10), y + height)\n    context2d.lineTo(x, y + height)\n    context2d.lineTo(x, y)\n  } else if (!up && !left) {\n    context2d.moveTo(x, y + height)\n    context2d.lineTo(x, y + height - (height / 10))\n    context2d.lineTo(x + width - (width / 10), y + height - (height / 10))\n    context2d.lineTo(x + width - (width / 10), y)\n    context2d.lineTo(x + width, y)\n    context2d.lineTo(x + width, y + height)\n  } else if (!up && left) {\n    context2d.moveTo(x + width, y + height)\n    context2d.lineTo(x + width, y + height - (height / 10))\n    context2d.lineTo(x + (width / 10), y + height - (height / 10))\n    context2d.lineTo(x + (width / 10), y)\n    context2d.lineTo(x, y)\n    context2d.lineTo(x, y + height)\n  } else if (up && !left) {\n    context2d.moveTo(x, y)\n    context2d.lineTo(x + width, y)\n    context2d.lineTo(x + width, y + height)\n    context2d.lineTo(x + width - (width / 10), y + height)\n    context2d.lineTo(x + width - (width / 10), y + (height / 10))\n    context2d.lineTo(x, y + (height / 10))\n  }\n  context2d.closePath()\n  context2d.fill()\n}\n\nexport const line = context2d => (x, y, position, grid, thick = true) => {\n  const width = grid / (thick ? 5 : 10)\n  \n  switch (position) {\n    case 'left': {\n      context2d.fillRect(x, y, width, grid)\n    }\n    case 'right': {\n      context2d.fillRect(x + grid - width, y, width, grid)\n    }\n    case 'top': {\n      context2d.fillRect(x, y, grid, width)\n    }\n    case 'bottom': {\n      context2d.fillRect(x, y + grid - width, grid, width)\n    }\n  }\n\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjCA;AAmCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAeA;AAlBA;;;;A","sourceRoot":""}