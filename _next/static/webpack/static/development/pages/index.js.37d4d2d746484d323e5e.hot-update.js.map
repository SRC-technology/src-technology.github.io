{"version":3,"file":"static/webpack/static/development/pages/index.js.37d4d2d746484d323e5e.hot-update.js","sources":["webpack:///./node_modules/triangular-numbers/getNthTriangularNumber.js","webpack:///./node_modules/triangular-numbers/getTriangularRootIndex.js","webpack:///./node_modules/triangular-numbers/isTriangular.js","webpack:///./node_modules/zero-indexed-ulam-spiral/getLatticeCoordinatesFor.js","webpack:///./src/Lattice.js"],"sourcesContent":["module.exports = function (n) {\n  return ( n * ( n + 1 ) ) / 2\n}\n","// https://en.wikipedia.org/wiki/Triangular_number#Triangular_roots_and_tests_for_triangular_numbers\nmodule.exports = function (n) {\n  return (\n    Math.floor(\n      ( Math.sqrt( ( 8 * n ) + 1 ) - 1 ) / 2\n    )\n  )\n}\n","module.exports = function (n) {\n  // it has to be a natural number\n  if (Math.floor(n) === n && n >= 0) {\n    var maybeNaturalSquareRoot = Math.sqrt( 8 * n + 1 )\n\n    // if itâ€™s an integer, then it's triangular\n    // (positive is a given,\n    // since n is now assured to be a natural and real\n    // of natural numbers are all positive)\n    return (\n      maybeNaturalSquareRoot === Math.floor(maybeNaturalSquareRoot)\n    )\n  }\n\n  return false\n}\n","var getNthTriangularNumber = require('triangular-numbers/getNthTriangularNumber')\nvar getTriangularRootIndex = require('triangular-numbers/getTriangularRootIndex')\nvar isTriangular = require('triangular-numbers/isTriangular')\n\nmodule.exports = function (number) {\n  var level\n\n  if (number === 0) {\n    return [0, 0]\n  }\n\n  if (isTriangular( number / 8 )) {\n    level = getTriangularRootIndex( number / 8 )\n    return [\n      level,\n      -level\n    ]\n  }\n\n  level = (\n    number === 0\n      ? 0\n      : (\n        getTriangularRootIndex(\n          Math.floor( number / 8 )\n        ) + 1\n      )\n  )\n\n  var base = getNthTriangularNumber( level - 1 ) * 8\n\n  var extra = number - base\n\n  var quartile = Math.floor( extra / ( level * 2 ) )\n\n  switch (quartile) {\n    case 0:\n      return [ level, (extra - level) ]\n    case 1:\n      return [ level - (extra - level * 2), level ]\n    case 2:\n      return [ -level, level - (extra - level * 4) ]\n    case 3:\n      return [ (extra - level * 6) - level , -level ]\n  }\n}\n","import React, { useRef, useEffect } from 'react'\nimport Color from 'fantasy-color'\nimport { range } from 'ramda'\nimport getLatticeCoordinatesFor from 'zero-indexed-ulam-spiral/getLatticeCoordinatesFor'\n\nconst palette = [\n  [19, 107, 251],\n  [252, 107, 33],\n  [252, 36, 226],\n  [28, 165, 252],\n  [253, 183, 43],\n  [0, 0, 0]\n]\n\nconst drawSquare = (squareSide) => (context2d) => (x, y, color) => {\n  const cachedFillStyle = context2d.fillStyle\n\n  context2d.beginPath()\n  context2d.moveTo(x, y)\n  context2d.lineTo(x + squareSide, y)\n  context2d.lineTo(x + squareSide, y + squareSide)\n  context2d.lineTo(x, y + squareSide)\n  context2d.closePath()\n  context2d.fillStyle = Color.of(...color).toRGBA()\n  context2d.fill()\n  context2d.fillStyle = cachedFillStyle\n}\n\nconst series = range(0, 100)\n  .map(i => palette[i % palette.length])\n  .reduce((points, color, index) => [\n    ...points,\n    {\n      x: getLatticeCoordinatesFor(index)[0],\n      y: getLatticeCoordinatesFor(index)[1],\n      color\n    }\n  ], [])\n\nexport default ({ width, height, devicePixelRatio }) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    if (ref.current !== undefined) {\n      const squareSide = 10 * devicePixelRatio\n\n      const middlePoint = [\n        Math.floor(width / 2) * devicePixelRatio, \n        Math.floor(height / 2) * devicePixelRatio\n      ]\n      \n      const context2d = ref.current.getContext('2d')\n      console.log(series)\n      drawSquare(squareSide)(context2d)(...middlePoint, palette[0])\n    }\n  })\n\n  return <canvas \n        ref={(domElement) => ref.current = domElement}\n        width={width * devicePixelRatio} \n        height={height * devicePixelRatio} \n        style={{width, height, display: 'block'}} \n    />\n}"],"mappings":";;;;;;;;;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AACA;AAaA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}