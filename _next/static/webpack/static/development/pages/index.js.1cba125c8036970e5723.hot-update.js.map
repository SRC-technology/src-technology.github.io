{"version":3,"file":"static/webpack/static/development/pages/index.js.1cba125c8036970e5723.hot-update.js","sources":["webpack:///./src/Lattice.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport getLatticeCoordinatesFor from 'zero-indexed-ulam-spiral/getLatticeCoordinatesFor'\nimport { GRID } from './constants'\nimport getFibonacci from './getFibonacci'\nimport getLatticeTopLeftPixel from './getLatticeTopLeftPixel'\nimport { upToTriangular } from './colorPicking'\nimport getNthTriangularNumber from 'triangular-numbers/getNthTriangularNumber'\nimport { triangle, rect, triangleBoundary } from './shapes'\n\nconst LENGTH = 20000\n\nconst circle = context2d => (x, y, radius) => {\n  context2d.beginPath();\n  context2d.arc(x, y, radius, 0, 2 * Math.PI)\n  context2d.fill()\n}\n\nconst drawSquare = (context2d) => (x, y, color, size) => {\n  const cachedFillStyle = context2d.fillStyle\n\n  context2d.fillStyle = color\n  // if (Math.random() > 0.5) {\n  rect(context2d)(x, y, size[0], size[1])\n  // } else {\n  //   circle(context2d)(x, y, size[0])\n  // }\n  context2d.fillStyle = cachedFillStyle\n}\n\nconst sizes = [\n  [10, 10],\n  [20, 20],\n  [30, 30]\n]\n\nconst renderLoop = (context2d, draw, squareSide, time, middlePoint) => {\n  context2d.clearRect(0, 0, middlePoint[0] * 2, middlePoint[1] * 2)\n\n  for (let i = 0; i < LENGTH; i++) {\n    // const latticeTopLeftPixel = getLatticeTopLeftPixel(middlePoint, squareSide)(getFibonacci(i + time))\n    // const latticeTopLeftPixel = getLatticeTopLeftPixel(middlePoint, squareSide)(getNthTriangularNumber(i + time))\n    const latticeTopLeftPixel = getLatticeTopLeftPixel(middlePoint, squareSide)(i * time)\n    draw(\n      latticeTopLeftPixel[0], \n      latticeTopLeftPixel[1], \n      upToTriangular(i + time),\n      sizes[1]\n    )\n  }\n  \n}\n\nexport default ({ width, height, devicePixelRatio }) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    if (ref.current !== undefined) {\n      const squareSide = GRID * devicePixelRatio\n\n      const middlePoint = [\n        Math.floor(width / 2) * devicePixelRatio, \n        Math.floor(height / 2) * devicePixelRatio\n      ]\n        \n      const context2d = ref.current.getContext('2d')\n      const draw = drawSquare(context2d)\n      let time = 0\n\n      setInterval(() => {\n        renderLoop(context2d, draw, squareSide, time, middlePoint)\n        time += 1  \n      }, 50)\n    }\n  })\n\n  return <canvas \n    ref={(domElement) => ref.current = domElement}\n    width={width * devicePixelRatio} \n    height={height * devicePixelRatio} \n    style={{width, height, display: 'block', position: 'absolute', top: 0, left: 0}} \n  />\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}