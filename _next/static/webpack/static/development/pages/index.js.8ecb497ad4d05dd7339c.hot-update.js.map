{"version":3,"file":"static/webpack/static/development/pages/index.js.8ecb497ad4d05dd7339c.hot-update.js","sources":["webpack:///./node_modules/fantasy-color/dist/Color.js","webpack:///./node_modules/fantasy-color/dist/brightness.js","webpack:///./node_modules/fantasy-color/dist/fromString.js","webpack:///./node_modules/fantasy-color/dist/toString.js","webpack:///./src/Lattice.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _brightness2 = require(\"./brightness\");\n\nvar _fromString = _interopRequireDefault(require(\"./fromString\"));\n\nvar _toString = require(\"./toString\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar Color = function Color(input) {\n  var x = typeof input === 'string' ? (0, _fromString.default)(input) : input;\n  return x === undefined ? undefined : Color.of.apply(Color, _toConsumableArray(x));\n};\n\nvar of = function of() {\n  var red = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var green = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var blue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  return {\n    red: red,\n    green: green,\n    blue: blue,\n    alpha: alpha,\n    brightness: function brightness() {\n      return (0, _brightness2.brightness)(red, green, blue, alpha);\n    },\n    toHEX: function toHEX() {\n      return (0, _toString.toHEX)(red, green, blue);\n    },\n    inspect: function inspect() {\n      return (0, _toString.toRGBA)(red, green, blue, alpha);\n    },\n    toArray: function toArray() {\n      return [red, green, blue, alpha];\n    },\n    toRGBA: function toRGBA() {\n      return (0, _toString.toRGBA)(red, green, blue, alpha);\n    },\n    toHSVA: function toHSVA() {\n      return (0, _toString.toHSVA)(red, green, blue, alpha);\n    },\n    toString: function toString() {\n      return (0, _toString.toRGBA)(red, green, blue, alpha);\n    },\n    invert: function invert() {\n      var invertColor = function invertColor(color) {\n        return 255 - color;\n      };\n\n      return Color.of(invertColor(red), invertColor(green), invertColor(blue), alpha);\n    }\n  };\n};\n\nColor.brightness = _brightness2.brightness;\nColor.getRedForEquivalentBrightnessColor = _brightness2.getRedForEquivalentBrightnessColor;\nColor.getGreenForEquivalentBrightnessColor = _brightness2.getGreenForEquivalentBrightnessColor;\nColor.getBlueForEquivalentBrightnessColor = _brightness2.getBlueForEquivalentBrightnessColor;\nColor.equivalentBrightnessSet = _brightness2.equivalentBrightnessSet;\nColor.toHEX = _toString.toHEX;\nColor.toRGB = _toString.toRGB;\nColor.toRGBA = _toString.toRGBA;\nColor.toHSVA = _toString.toHSVA;\nColor.of = of;\nvar _default = Color;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.equivalentBrightnessSet = exports.getBlueForEquivalentBrightnessColor = exports.getGreenForEquivalentBrightnessColor = exports.getRedForEquivalentBrightnessColor = exports.brightness = exports.BLUE_BRIGHTNESS_WEIGHT = exports.GREEN_BRIGHTNESS_WEIGHT = exports.RED_BRIGHTNESS_WEIGHT = void 0;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n// Magical weights for calculating perceived relative brightness\n// Taken from http://alienryderflex.com/hsp.html\nvar RED_BRIGHTNESS_WEIGHT = 0.299;\nexports.RED_BRIGHTNESS_WEIGHT = RED_BRIGHTNESS_WEIGHT;\nvar GREEN_BRIGHTNESS_WEIGHT = 0.587;\nexports.GREEN_BRIGHTNESS_WEIGHT = GREEN_BRIGHTNESS_WEIGHT;\nvar BLUE_BRIGHTNESS_WEIGHT = 0.114;\nexports.BLUE_BRIGHTNESS_WEIGHT = BLUE_BRIGHTNESS_WEIGHT;\n\nvar brightness = function brightness(red, green, blue, alpha) {\n  return Math.sqrt(Math.pow(red, 2) * RED_BRIGHTNESS_WEIGHT + Math.pow(green, 2) * GREEN_BRIGHTNESS_WEIGHT + Math.pow(blue, 2) * BLUE_BRIGHTNESS_WEIGHT) * alpha;\n};\n\nexports.brightness = brightness;\n\nvar getRedForEquivalentBrightnessColor = function getRedForEquivalentBrightnessColor(brightness, green, blue) {\n  return Math.round(Math.sqrt((Math.pow(brightness, 2) - Math.pow(blue, 2) * BLUE_BRIGHTNESS_WEIGHT - Math.pow(green, 2) * GREEN_BRIGHTNESS_WEIGHT) / RED_BRIGHTNESS_WEIGHT));\n};\n\nexports.getRedForEquivalentBrightnessColor = getRedForEquivalentBrightnessColor;\n\nvar getGreenForEquivalentBrightnessColor = function getGreenForEquivalentBrightnessColor(brightness, red, blue) {\n  return Math.round(Math.sqrt((Math.pow(brightness, 2) - Math.pow(blue, 2) * BLUE_BRIGHTNESS_WEIGHT - Math.pow(red, 2) * RED_BRIGHTNESS_WEIGHT) / GREEN_BRIGHTNESS_WEIGHT));\n};\n\nexports.getGreenForEquivalentBrightnessColor = getGreenForEquivalentBrightnessColor;\n\nvar getBlueForEquivalentBrightnessColor = function getBlueForEquivalentBrightnessColor(brightness, red, green) {\n  return Math.round(Math.sqrt((Math.pow(brightness, 2) - Math.pow(red, 2) * RED_BRIGHTNESS_WEIGHT - Math.pow(green, 2) * GREEN_BRIGHTNESS_WEIGHT) / BLUE_BRIGHTNESS_WEIGHT));\n};\n\nexports.getBlueForEquivalentBrightnessColor = getBlueForEquivalentBrightnessColor;\n\nvar equivalentBrightnessSet = function equivalentBrightnessSet(brightness, equivalentBrightnessArray, options) {\n  var lastEquivalentBrightnessColor = equivalentBrightnessArray[equivalentBrightnessArray.length - 1];\n  var red = options.affect === 'red' ? getRedForEquivalentBrightnessColor(brightness, options.modify === 'green' ? lastEquivalentBrightnessColor[1] + options.variation : lastEquivalentBrightnessColor[1], options.modify === 'blue' ? lastEquivalentBrightnessColor[2] + options.variation : lastEquivalentBrightnessColor[2]) : options.modify === 'red' ? lastEquivalentBrightnessColor[0] + options.variation : lastEquivalentBrightnessColor[0];\n  var green = options.affect === 'green' ? getGreenForEquivalentBrightnessColor(brightness, options.modify === 'red' ? lastEquivalentBrightnessColor[0] + options.variation : lastEquivalentBrightnessColor[0], options.modify === 'blue' ? lastEquivalentBrightnessColor[2] + options.variation : lastEquivalentBrightnessColor[2]) : options.modify === 'green' ? lastEquivalentBrightnessColor[1] + options.variation : lastEquivalentBrightnessColor[1];\n  var blue = options.affect === 'blue' ? getBlueForEquivalentBrightnessColor(brightness, options.modify === 'red' ? lastEquivalentBrightnessColor[0] + options.variation : lastEquivalentBrightnessColor[0], options.modify === 'green' ? lastEquivalentBrightnessColor[1] + options.variation : lastEquivalentBrightnessColor[1]) : options.modify === 'blue' ? lastEquivalentBrightnessColor[2] + options.variation : lastEquivalentBrightnessColor[2];\n  var next = [red, green, blue];\n\n  if (!isNaN(red) && red >= 0 && red < 256 && !isNaN(green) && green >= 0 && green < 256 && !isNaN(blue) && blue >= 0 && blue < 256) {\n    return equivalentBrightnessSet(brightness, _toConsumableArray(equivalentBrightnessArray).concat([next]), options);\n  } else {\n    return equivalentBrightnessArray;\n  }\n};\n\nexports.equivalentBrightnessSet = equivalentBrightnessSet;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.fromHSVA = exports.fromRGB = exports.fromRGBA = exports.fromHEX = void 0;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar fromHEX = function fromHEX(input) {\n  return input.length === 7 ? [input.slice(1, 3), input.slice(3, 5), input.slice(5, 7)].map(function (x) {\n    return parseInt(x, 16);\n  }).reduce(function (acc, color) {\n    return acc === undefined || isNaN(color) ? undefined : _toConsumableArray(acc).concat([color]);\n  }, []) : undefined;\n};\n\nexports.fromHEX = fromHEX;\n\nvar fromRGBA = function fromRGBA(input) {\n  return input.indexOf('(') === -1 || input.indexOf(')') === -1 ? undefined : input.split('(')[1].split(')')[0].split(',').map(function (y) {\n    return y.trim();\n  }).map(function (z) {\n    return z.indexOf('.') !== -1 ? parseFloat(z, 10) : parseInt(z, 10);\n  }).reduce(function (acc, color) {\n    return acc === undefined || isNaN(color) ? undefined : _toConsumableArray(acc).concat([color]);\n  }, []);\n};\n\nexports.fromRGBA = fromRGBA;\n\nvar fromRGB = function fromRGB(input) {\n  return input.indexOf('(') === -1 || input.indexOf(')') === -1 ? undefined : input.split('(')[1].split(')')[0].split(',').map(function (y) {\n    return parseInt(y.trim(), 10);\n  }).reduce(function (acc, color) {\n    return acc === undefined || isNaN(color) ? undefined : _toConsumableArray(acc).concat([color]);\n  }, []);\n};\n\nexports.fromRGB = fromRGB;\n\nvar fromHSVA = function fromHSVA(input) {\n  var parsed = input.indexOf('(') === -1 || input.indexOf(')') === -1 ? undefined : input.split('(')[1].split(')')[0].split(',').map(function (y) {\n    return y.trim();\n  }).map(function (z) {\n    return z.indexOf('.') !== -1 ? parseFloat(z, 10) : parseInt(z, 10);\n  }).reduce(function (acc, color) {\n    return acc === undefined || isNaN(color) ? undefined : _toConsumableArray(acc).concat([color]);\n  }, []);\n\n  if (parsed === undefined) {\n    return undefined;\n  } // https://en.wikipedia.org/wiki/HSL_and_HSV#From_HSV\n\n\n  var _parsed = _slicedToArray(parsed, 4),\n      hue = _parsed[0],\n      saturation = _parsed[1],\n      value = _parsed[2],\n      alpha = _parsed[3];\n\n  var normalizedSaturation = saturation / 100;\n  var normalizedValue = value / 100;\n  var C = normalizedValue * normalizedSaturation;\n  var hueSixths = hue / 60;\n  var X = C * (1 - Math.abs(hueSixths % 2 - 1));\n  var red1, green1, blue1;\n\n  if (hueSixths <= 1) {\n    red1 = C;\n    green1 = X;\n    blue1 = 0;\n  } else if (hueSixths <= 2) {\n    red1 = X;\n    green1 = C;\n    blue1 = 0;\n  } else if (hueSixths <= 3) {\n    red1 = 0;\n    green1 = C;\n    blue1 = X;\n  } else if (hueSixths <= 4) {\n    red1 = 0;\n    green1 = X;\n    blue1 = C;\n  } else if (hueSixths <= 5) {\n    red1 = X;\n    green1 = 0;\n    blue1 = C;\n  } else if (hueSixths <= 6) {\n    red1 = C;\n    green1 = 0;\n    blue1 = X;\n  }\n\n  var m = normalizedValue - C;\n  var red = Math.round((red1 + m) * 255);\n  var green = Math.round((green1 + m) * 255);\n  var blue = Math.round((blue1 + m) * 255);\n  return [red, green, blue, alpha];\n};\n\nexports.fromHSVA = fromHSVA;\n\nvar _default = function _default(input) {\n  if (input[0] === '#') {\n    var colors = fromHEX(input);\n    return colors === undefined ? undefined : colors;\n  }\n\n  if (input.slice(0, 4) === 'rgba') {\n    var _colors = fromRGBA(input);\n\n    return _colors === undefined ? undefined : _colors;\n  }\n\n  if (input.slice(0, 4) === 'hsva') {\n    var _colors2 = fromHSVA(input);\n\n    return _colors2 === undefined ? undefined : _colors2;\n  }\n\n  if (input.slice(0, 3) === 'rgb') {\n    var _colors3 = fromRGB(input);\n\n    return _colors3 === undefined || _colors3.length !== 3 ? undefined : _colors3;\n  }\n};\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHSBA = exports.toHSVA = exports.toRGBA = exports.toRGB = exports.toHEX = void 0;\n\nvar toHEX = function toHEX(red, green, blue) {\n  return '#' + red.toString(16).toUpperCase() + green.toString(16).toUpperCase() + blue.toString(16).toUpperCase();\n};\n\nexports.toHEX = toHEX;\n\nvar toRGB = function toRGB(red, green, blue) {\n  return \"rgb(\".concat(red, \", \").concat(green, \", \").concat(blue, \")\");\n};\n\nexports.toRGB = toRGB;\n\nvar toRGBA = function toRGBA(red, green, blue, alpha) {\n  return \"rgba(\".concat(red, \", \").concat(green, \", \").concat(blue, \", \").concat(alpha, \")\");\n}; // Implementation inspired from\n// https://stackoverflow.com/a/4235146/5801727\n\n\nexports.toRGBA = toRGBA;\n\nvar toHSVA = function toHSVA(red, green, blue, alpha) {\n  var normalizedRed = red / 255;\n  var normalizedGreen = green / 255;\n  var normalizedBlue = blue / 255;\n  var maximumValue = Math.max(normalizedRed, normalizedGreen, normalizedBlue);\n  var minimumValue = Math.min(normalizedRed, normalizedGreen, normalizedBlue);\n  var delta = maximumValue - minimumValue;\n  var value = Math.round(maximumValue * 100);\n\n  if (delta === 0) {\n    // This means that this is gray\n    var hue = 0;\n    var _saturation = 0;\n    return \"hsva(\".concat(hue, \", \").concat(_saturation, \", \").concat(value, \", \").concat(alpha, \")\");\n  }\n\n  var saturation = Math.round(delta / maximumValue * 100);\n  var deltaRed = ((maximumValue - normalizedRed) / 6 + delta / 2) / delta;\n  var deltaGreen = ((maximumValue - normalizedGreen) / 6 + delta / 2) / delta;\n  var deltaBlue = ((maximumValue - normalizedBlue) / 6 + delta / 2) / delta;\n\n  switch (maximumValue) {\n    case normalizedRed:\n      {\n        var _hue = Math.round(((deltaBlue - deltaGreen) * 360 + 360) % 360);\n\n        return \"hsva(\".concat(_hue, \", \").concat(saturation, \", \").concat(value, \", \").concat(alpha, \")\");\n      }\n\n    case normalizedGreen:\n      {\n        var _hue2 = Math.round(((1 / 3 + deltaRed - deltaBlue) * 360 + 360) % 360);\n\n        return \"hsva(\".concat(_hue2, \", \").concat(saturation, \", \").concat(value, \", \").concat(alpha, \")\");\n      }\n\n    case normalizedBlue:\n      {\n        var _hue3 = Math.round(((2 / 3 + deltaGreen - deltaRed) * 360 + 360) % 360);\n\n        return \"hsva(\".concat(_hue3, \", \").concat(saturation, \", \").concat(value, \", \").concat(alpha, \")\");\n      }\n  }\n};\n\nexports.toHSVA = toHSVA;\nvar toHSBA = toHSVA; // export const toHSV = (red, green, blue) => toHSVA(red, green, blue, 1)\n\nexports.toHSBA = toHSBA;","import React, { useRef, useEffect } from 'react'\nimport Color from 'fantasy-color'\n\nconst palette = [\n  [19, 107, 251],\n  [252, 107, 33],\n  [252, 36, 226],\n  [28, 165, 252],\n  [253, 183, 43],\n  [0, 0, 0]\n]\n\nconst drawSquare = (squareSide) => (context2d) => (x, y, color) => {\n  const cachedFillStyle = context2d.fillStyle\n\n  context2d.beginPath()\n  context2d.moveTo(x, y)\n  context2d.lineTo(x + squareSide, y)\n  context2d.lineTo(x + squareSide, y + squareSide)\n  context2d.lineTo(x, y + squareSide)\n  context2d.closePath()\n  context2d.fillStyle = Color.of(...color).toRGBA()\n  context2d.fill()\n}\n\nexport default ({ width, height, devicePixelRatio }) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    if (ref.current !== undefined) {\n      const squareSide = 10 * devicePixelRatio\n\n      const middlePoint = [\n        Math.floor(width / 2) * devicePixelRatio, \n        Math.floor(height / 2) * devicePixelRatio\n      ]\n      \n      const context2d = ref.current.getContext('2d')\n      drawSquare(squareSide)(context2d)(...middlePoint, palette[0])\n    }\n  })\n\n  return <canvas \n        ref={(domElement) => ref.current = domElement}\n        width={width * devicePixelRatio} \n        height={height * devicePixelRatio} \n        style={{width, height, display: 'block'}} \n    />\n}"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChsourceRoot":""}