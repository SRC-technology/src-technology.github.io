{"version":3,"file":"static/webpack/static/development/pages/index.js.f1c04601823786038d12.hot-update.js","sources":["webpack:///./src/Lattice.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport getLatticeCoordinatesFor from 'zero-indexed-ulam-spiral/getLatticeCoordinatesFor'\n\nconst palette = [\n  'rgb(19, 107, 251)',\n  'rgb(252, 107, 33)',\n  'rgb(252, 36, 226)',\n  'rgb(28, 165, 252)',\n  'rgb(253, 183, 43)',\n  'rgb(252, 19, 109)',\n  'rgb(0, 0, 0)'\n]\n\nconst drawSquare = (squareSide) => (context2d) => (x, y, color) => {\n  const cachedFillStyle = context2d.fillStyle\n\n  context2d.beginPath()\n  context2d.moveTo(x, y)\n  context2d.lineTo(x + squareSide, y)\n  context2d.lineTo(x + squareSide, y + squareSide)\n  context2d.lineTo(x, y + squareSide)\n  context2d.closePath()\n  context2d.fillStyle = color\n  context2d.fill()\n  context2d.fillStyle = cachedFillStyle\n}\n\nexport default ({ width, height, devicePixelRatio, time }) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    if (ref.current !== undefined) {\n      const squareSide = 10 * devicePixelRatio\n\n      const middlePoint = [\n        Math.floor(width / 2) * devicePixelRatio, \n        Math.floor(height / 2) * devicePixelRatio\n      ]\n      \n      const context2d = ref.current.getContext('2d')\n      const draw = drawSquare(squareSide)(context2d)\n      const length = 100000\n\n      for (let i = 0; i < length; i++) {\n        const latticeCoordinates = getLatticeCoordinatesFor(i)\n        draw(\n          middlePoint[0] + (latticeCoordinates[0] * squareSide), \n          middlePoint[1] + (latticeCoordinates[1] * squareSide), \n          palette[(i + time) % palette.length]\n        )\n      }      \n    }\n  }, [time])\n\n  return <canvas \n        ref={(domElement) => ref.current = domElement}\n        width={width * devicePixelRatio} \n        height={height * devicePixelRatio} \n        style={{width, height, display: 'block'}} \n    />\n}"],"mappingsaA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}