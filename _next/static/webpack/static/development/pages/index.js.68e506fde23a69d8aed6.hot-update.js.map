{"version":3,"file":"static/webpack/static/development/pages/index.js.68e506fde23a69d8aed6.hot-update.js","sources":["webpack:///./src/Lattice.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport getLatticeCoordinatesFor from 'zero-indexed-ulam-spiral/getLatticeCoordinatesFor'\n\nconst palette = [\n  'rgb(19, 107, 251)',\n  'rgb(252, 107, 33)',\n  'rgb(252, 36, 226)',\n  'rgb(28, 165, 252)',\n  'rgb(253, 183, 43)',\n  'rgb(252, 19, 109)',\n  'rgb(0, 0, 0)'\n]\n\nconst drawSquare = (squareSide) => (context2d) => (x, y, color) => {\n  const cachedFillStyle = context2d.fillStyle\n\n  context2d.fillStyle = color\n  context2d.fillRect(x, y, squareSide, squareSide)\n  context2d.fillStyle = cachedFillStyle\n}\n\nconst renderLoop = (context2d, squareSide, length, time, middlePoint) => {\n  context2d.clearRect(0, 0, middlePoint[0] * 2, middlePoint[1] * 2)\n\n  for (let i = 0; i < length; i++) {\n    const latticeCoordinates = getLatticeCoordinatesFor(getFibonacci(i) + time)\n    draw(\n      middlePoint[0] + (latticeCoordinates[0] * squareSide), \n      middlePoint[1] + (latticeCoordinates[1] * squareSide), \n      palette[(i + time) % palette.length]\n    )\n  }\n  \n}\n\nexport default ({ width, height, devicePixelRatio }) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    if (ref.current !== undefined) {\n      const squareSide = 10 * devicePixelRatio\n\n      const middlePoint = [\n        Math.floor(width / 2) * devicePixelRatio, \n        Math.floor(height / 2) * devicePixelRatio\n      ]\n        \n      const context2d = ref.current.getContext('2d')\n      const draw = drawSquare(squareSide)(context2d)\n      const length = 30\n      let time = 0\n\n      setInterval(() => {\n        renderLoop(context2d, draw, length, time, middlePoint)\n        time += 1  \n      }, 50)\n\n    }\n  })\n\n  const fibonaccis = [1, 1]\n  const getFibonacci = (num) => {\n    for (let i = fibonaccis.length; i <= num; ++i) {\n      fibonaccis[i] = fibonaccis[i - 1] + fibonaccis[i - 2]\n    }\n    return fibonaccis[num]\n  }\n\n  return <canvas \n        ref={(domElement) => ref.current = domElement}\n        width={width * devicePixelRatio} \n        height={height * devicePixelRatio} \n        style={{width, height, display: 'block'}} \n    />\n}"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AASA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AANA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}