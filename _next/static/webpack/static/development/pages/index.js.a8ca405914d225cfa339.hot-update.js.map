{"version":3,"file":"static/webpack/static/development/pages/index.js.a8ca405914d225cfa339.hot-update.js","sources":["webpack:///./src/Lattice.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport Color from 'fantasy-color'\nimport { range } from 'ramda'\nimport getLatticeCoordinatesFor from 'zero-indexed-ulam-spiral/getLatticeCoordinatesFor'\n\nconst palette = [\n  [19, 107, 251],\n  [252, 107, 33],\n  [252, 36, 226],\n  [28, 165, 252],\n  [253, 183, 43],\n  [252, 19, 109],\n  [0, 0, 0]\n]\n\nconst drawSquare = (squareSide) => (context2d) => (x, y, color) => {\n  const cachedFillStyle = context2d.fillStyle\n\n  context2d.beginPath()\n  context2d.moveTo(x, y)\n  context2d.lineTo(x + squareSide, y)\n  context2d.lineTo(x + squareSide, y + squareSide)\n  context2d.lineTo(x, y + squareSide)\n  context2d.closePath()\n  context2d.fillStyle = Color.of(...color).toRGBA()\n  context2d.fill()\n  context2d.fillStyle = cachedFillStyle\n}\n\nconst series = range(0, 10000)\n  .map(i => palette[i % palette.length])\n  .reduce((points, color, index) => [\n    ...points,\n    {\n      x: getLatticeCoordinatesFor(index)[0],\n      y: getLatticeCoordinatesFor(index)[1],\n      color\n    }\n  ], [])\n\nexport default ({ width, height, devicePixelRatio }) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    if (ref.current !== undefined) {\n      const squareSide = 10 * devicePixelRatio\n\n      const middlePoint = [\n        Math.floor(width / 2) * devicePixelRatio, \n        Math.floor(height / 2) * devicePixelRatio\n      ]\n      \n      const context2d = ref.current.getContext('2d')\n      const draw = drawSquare(squareSide)(context2d)\n      series\n        .map(({x, y, color}) => ({\n          x: middlePoint[0] + (x * squareSide),\n          y: middlePoint[1] + (y * squareSide),\n          color\n        }))\n        .forEach(({ x, y, color }) => {\n          draw(x, y, color)\n        })\n      \n    }\n  })\n\n  return <canvas \n        ref={(domElement) => ref.current = domElement}\n        width={width * devicePixelRatio} \n        height={height * devicePixelRatio} \n        style={{width, height, display: 'block'}} \n    />\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AASA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AACA;AAaA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAHA;AAFA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}