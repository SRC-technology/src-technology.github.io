{"version":3,"file":"static/webpack/static/development/pages/bigLogo.js.5802d0e3fb71d3cfb437.hot-update.js","sources":["webpack:///./src/BigLogo.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { GRID } from './constants'\nimport { triangle, rect, triangleBoundary, line } from './shapes'\nimport getLatticeTopLeftPixel from './getLatticeTopLeftPixel'\n\nconst LENGTH = 465\nconst Shapes = {\n  Rect: { type: 'rect' },\n  BottomLeftTriangle: { type: 'triangle', up: true, left: true },\n  BottomRightTriangle: { type: 'triangle', up: true, left: false },\n  TopLeftTriangle: { type: 'triangle', up: false, left: true },\n  TopRightTriangle: { type: 'triangle', up: false, left: false },\n  LeftLine: { type: 'line', position: 'left' },\n}\nconst logo = {\n  0: [Shapes.Rect],\n  1: [Shapes.Rect],\n  2: [Shapes.Rect],\n  5: [Shapes.Rect],\n  6: [Shapes.Rect],\n  7: [Shapes.Rect],\n  8: [Shapes.Rect],\n  9: [Shapes.TopLeftTriangle],\n  10: [Shapes.BottomLeftTriangle],\n  11: [Shapes.Rect],\n  12: [Shapes.Rect],\n  13: [Shapes.Rect],\n  16: [Shapes.Rect],\n  17: [Shapes.Rect],\n  18: [Shapes.Rect],\n  19: [Shapes.Rect],\n  20: [Shapes.Rect],\n  23: [Shapes.Rect],\n  24: [Shapes.Rect],\n  31: [Shapes.Rect],\n  32: [Shapes.Rect],\n  35: [Shapes.Rect],\n  36: [Shapes.Rect],\n  37: [Shapes.Rect],\n  38: [Shapes.Rect],\n  39: [Shapes.Rect],\n  40: [Shapes.Rect],\n  41: [Shapes.Rect],\n  42: [Shapes.Rect],\n  43: [Shapes.Rect],\n  46: [Shapes.Rect],\n  47: [Shapes.Rect],\n  58: [Shapes.Rect],\n  59: [Shapes.Rect],\n  62: [Shapes.Rect],\n  63: [Shapes.Rect],\n  73: [Shapes.BottomRightTriangle, Shapes.LeftLine],\n}\n\nconst drawingLoop = (getLatticeTopLeftPixelWithCenterAndGridSize, drawRect, drawTriangle, drawTriangleBoundary, drawLine, squareSide, clean, time) => {\n  clean()\n\n  for (let i = 0; i < LENGTH; i ++) {\n    // const displacement = Math.max(20 - time, 0)\n    const latticeTopLeftPixel = getLatticeTopLeftPixelWithCenterAndGridSize(i)\n\n    // const shape = shapes[(i + time) % shapes.length]\n    const pieces = logo[i]\n\n    if (pieces !== undefined) {\n      console.log(pieces)\n      for (let j = 0; j < pieces.length; j ++) {\n        const shape = pieces[j]\n  \n        if (shape.type === 'rect') {\n          drawRect(latticeTopLeftPixel[0], latticeTopLeftPixel[1], squareSide, squareSide)\n        } else if (shape.type === 'triangle') {\n          drawTriangle(latticeTopLeftPixel[0], latticeTopLeftPixel[1], shape.up, shape.left, squareSide, squareSide)\n        } else if (shape.type === 'triangleBoundary') {\n          drawTriangleBoundary(latticeTopLeftPixel[0], latticeTopLeftPixel[1], shape.up, shape.left, squareSide, squareSide)\n        } else if (shape.type === 'line') {\n          drawLine(latticeTopLeftPixel[0], latticeTopLeftPixel[1], shape.position, squareSide)\n        }\n      }\n    }\n  }      \n}\n\nexport default ({ width, height, devicePixelRatio }) => {\n  const ref = useRef()\n\n  useEffect(() => {\n    if (ref.current !== undefined) {\n      const squareSide = GRID * devicePixelRatio\n\n      const middlePoint = [\n        Math.floor(width / 2) * devicePixelRatio, \n        Math.floor(height / 2) * devicePixelRatio\n      ]\n        \n      const context2d = ref.current.getContext('2d')\n\n      const getLatticeTopLeftPixelWithCenterAndGridSize = \n        getLatticeTopLeftPixel(middlePoint, squareSide)\n\n      context2d.fillStyle = 'rgba(0,0,0,.8)'\n      \n      const drawRect = rect(context2d)\n      const drawTriangle = triangle(context2d)\n      const drawTriangleBoundary = triangleBoundary(context2d)\n      const drawLine = line(context2d)\n\n      const clean = () => context2d.clearRect(0, 0, middlePoint[0] * 2, middlePoint[1] * 2)\n      let time = 0\n\n      // drawingLoop(getLatticeTopLeftPixelWithCenterAndGridSize, drawRect, drawTriangle, drawTriangleBoundary, squareSide, clean, time)\n      setInterval(() => {\n        drawingLoop(getLatticeTopLeftPixelWithCenterAndGridSize, drawRect, drawTriangle, drawTriangleBoundary, drawLine, squareSide, clean, time)\n        time ++\n      }, 50)\n    }\n  })\n\n  return <canvas \n    ref={(domElement) => ref.current = domElement}\n    width={width * devicePixelRatio} \n    height={height * devicePixelRatio} \n    style={{width, height, display: 'block', position: 'absolute', top: 0, left: 0}} \n  />\n}"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AACA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}